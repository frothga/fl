Contents
--------

This directory contains a collection of tools I have developed over the years.
Some are scripts or simple executables, and others are C++ headers and
libraries.

The arrangement of the materials is:

bin
	Command line executables.  These are built from src/util

html, man
	Doxygen generated documentation.

include
	All the include files for the libraries.

lib
	The library files needed for linking.

script
	Shell scripts.

src
	Source code for everything.
	base
		Simple utility classes not catagorized elsewhere.
	util
		These are compiled into command line executables rather than a library.
	X
		Classes that wrap X window structures.  Not intended to be a GUI
		toolkit as much as a way to access basic X using C++.
	numeric
		Linear algebra classes (vector, matrix) and a bridge to LAPACK.  Not
		the most efficient matrix library, and doesn't inlcude every fancy
		memory layout, but does have a clean programming interface.
	image
		Image processing.
	net
		Stream interface to TCP sockets, plus some basic server infrastructure.

mswin
	External dependencies that are normally distributed with a GNU-style system
	but not a Miscrosoft Windows system.  These are pre-built libraries that
	you will need to link with your application under Windows.  This directory
	is included as a convenience for Windows users.

	These libraries are built from unmodified source code, a feat which the
	user may replicate by following the instructions in
	"How to build support libraries.txt"


Building under posix systems
----------------------------

Use CMake to generate a makefile and resolve external dependencies.
After CMake is done, run "make" or "make install" at the command line.


Building under Microsoft Visual Studio
--------------------------------------

Use CMake to generate a VS project and resolve external dependencies.
It should automatically locate any resources built and placed in the mswin
directory of this project.  Once CMake is done, open the resulting solution
file in VS and build it.  When using FL in your your own applications,
you will need to add fl/include, mswin/include, fl/lib, and mswin/lib
to the appropriate paths.  You will also need to explicitly reference the
fl and mswin static libs.
