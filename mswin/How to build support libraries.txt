Instructions for building Microsoft C versions of the support libraries.
========================================================================

This file explains how to build support libraries that can be linked into software built by Miscrosft toochains.  If you simply wish to use FL on a Windows system, the simplest way is to completely operate within the Cygwin environment.  However, if you goal is to use Miscrosoft tools, you must prepare libraries that are compatible.


Directory structure and naming conventions
------------------------------------------
The directory mswin generally resides directly under the root FL directory.  It contains subdirectories similar in structure to other posix software installations (bin, include, lib, lib64).  It also contains a "build" directory, which in turn contains source directories for the various supporting libraries.  When populating this structure from scratch, you should search for and download the most recent source code for each package.

Most files retain the name they normally receive from the build process in their respective projects.  However, libraries are renamed to be simple and follow MS naming conventions.  In particular, all libraries end in ".lib", and they generally to not have a leading or trailing "lib" in the name.  The following are desirable library names:

	jpeg.lib        // drop extraneous "lib"
	z.lib           // drop extraneous "lib"
	tiff.lib        // drop extraneous "lib"
	freetype.lib    // No version number


Build environment and tools
---------------------------
The preferred approach is to use the MS toolchain itself.  Some of these packages come with Visual Studio projects.  Other packages come with nmake scripts, and build best in a command window, often called a "Visual Studio Command Prompt".  When Visual Studio is installed, there sould be a Start menu item under the VS program group for launching such a command prompt.

To build 64bit versions, you will need the x64 cross-compiler supplied with Visual Studio Pro (or higher) editions.  Alternately, you can install the latest Windows SDK and select the 64bit toolchain.  You can then run nmake, or launch an express edition from the command line:

	vcexpress /useenv

One of these packages (FFMPEG) can only be built under MinGW + MSYS.  First install MinGW (either 32-bit or 64-bit), then install MSYS and have it point its /mingw directory to the correct version of MinGW.

MinGW 32-bit: To prepare the MinGW compiler, go to http://sourceforge.net/projects/mingw/files, download the latest installer, and place it in c:\mingw32\setup.  Accept the default "current" package.

MinGW 64-bit: Currently, the 64-bit calling conventions used by GCC differ from those used by the MS toolchain, so the 64-bit libraries built by MinGW don't work in MS compiled programs.  Here are instructions to set up 64-bit MinGW, in case this is ever resolved...  Download from http://sourceforge.net/projects/mingw-w64.  Install in c:\mingw64, and add it to the path as described above.

To prepare the MSYS environment, go to http://sourceforge.net/projects/mingw/files and download/run the latest MSYS Base System installer program.  Install in c:\msys.


FL supplied headers
-------------------
As of this writing, MS does not provide stdint.h or inttypes.h.  Instead, there are minimal substitutes already present in mswin/include.  Remove these if MS ever achieves better standards compliance.


FreeType
--------
Solution file is builds/win32/{latest vc}/freetype.sln.  Build the "LIB Release Multithreaded" configuration.

Copy the library to mswin/lib or lib64, and rename:

	objs/win32/{latest vc}/freetype{version}.lib  --> freetype.lib

Copy the contents of the include directory into mswin/include.


Pthreads-w32
------------
32-bit:  Download and execute

	http://sourceware.org/pub/pthreads-win32/pthreads-w32-x-x-x-release.exe

Open pthread.2/pthread.dsw and allow VS to convert it.  Select Release mode and compile.

Copy the library to mswin/lib or lib64 and rename:

	pthread.2/pthreadVC2.lib  --> pthread.lib

Copy the DLL to mswin/bin:

	pthread.2/pthreadVC2.dll

Copy headers to mswin/include:

	pthread.2/pthread.h
	pthread.2/sched.h
	pthread.2/semaphore.h

Alternately, you can copy the prebuilt version:

	Pre-built.2/include/*
	Pre-built.2/lib/pthreadVC2.dll
	Pre-built.2/lib/pthreadVC2.lib

Keep the version suffix in pthreadXXX.dll, since the lib creates a dependency on a DLL with that specific suffix in its name.

64-bit:  Go to http://sourceforge.net/projects/mingw-w64 and look for pthreads-w32 in the downloads section.  Get and apply the patch.  Then build using Visual Studio.


LAPACK and BLAS
---------------
Prebuilt binaries are available from the CLAPACK project:http://www.netlib.org/clapack/LIB_WINDOWS/prebuilt_libraries_windows.html
Use the Release nowrap versions.

If you wish to build the libraries, follow the instructions given in http://www.netlib.org/clapack/readme.install.  In particular, follow the instructions for a non-wrapped Fortran interface to BLAS, rather than a CBLAS interface.

The reference implementation of BLAS is sufficient, but a more efficient one can be built using GotoBLAS from the University of Texas: http://www.tacc.utexas.edu/software_modules.php
GotoBLAS requires a Cygwin environment to build.  Instructions are included in the downloaded package.

Copy libraries to mswin/lib or lib64 and rename:

	BLAS_nowrap.lib     --> blas.lib
	clapack_nowrap.lib  --> lapack.lib
	libf2c.lib          --> fortran.lib


JPEG
----
The following instructions are designed for a raw download of the 1998 version of jpeg-6b.  Overwrite the configuration files with vc specific version:

	jconfig.vc  --> jconfig.h
	makefile.vc --> makefile

Start a Visual Studio Command Prompt and type:

	cd {mswin}/build/jpeg-6b
	nmake clean all

Ignore warnings about security.

Copy the library to mswin/lib or lib64, and rename:

	libjpeg.lib  --> jpeg.lib

Copy the headers to mswin/include:

	jconfig.h
	jerror.h
	jmorecfg.h
	jpeglib.h


Z
-
Launch projects/visualc6/zlib.dsw
This workspace file is out of date, but still converts successfully as of VS2008.

Select "LIB Release" mode and build.

Copy the library to mswin/lib or lib64 and rename:

	Win32_LIB_Release/zlib.lib  --> z.lib

Copy the headers to mswin/include:

	zconf.h
	zlib.h


TIFF
----
Build JPEG and Z first, so that TIFF can refer to them.

Modify nmake.opt by uncommenting the lines for JPEG and ZLIB support.  Point each one to mswin to get the built libraries.

	JPEGDIR = {absolute path to mswin; may need quote marks}
	JPEG_INCLUDE = -I$(JPEGDIR)/include
	JPEG_LIB = $(JPEGDIR)/lib/jpeg.lib

	ZLIBDIR = {absolute path to mswin; may need quote marks}
	ZLIB_INCLUDE = -I$(ZLIBDIR)/include
	ZLIB_LIB = $(ZLIBDIR)/lib/z.lib

Overwrite configuration with vc specific files:  (Note that the names are changed in newer versions of TIFF.  Instructions apply to version 3.8.2)

	libtiff/tiffconf.vc.h   --> libtiff/tiffconf.h
	libtiff/tif_config.vc.h --> libtiff/tif_config.h

Open a Visual Studio Command Prompt and type:

	cd {mswin}/build/{tiff project directory}
	nmake /f Makefile.vc clean    // if you want to clean out a previous build
	nmake /f Makefile.vc

Copy the library to mswin/lib or lib64 and rename:

	libtiff/libtiff.lib  --> tiff.lib

(Note that libtiff.lib is a static version, while libtiff_i.lib is an import library associated with libtiff.dll.  The instructions here assume a preference for static linking.)

Copy the headers to mswin/include:

	libtiff/tiff.h
	libtiff/tiffconf.h
	libtiff/tiffio.h
	libtiff/tiffvers.h


GeoTIFF
-------
Overwrite configuration with vc specific files:

	geo_config.h.vc --> geo_config.h
	makefile.vc     --> makefile

Edit makefile:

	TIFF_DIR = ..\{tiff project directory}\libtiff
	PREFIX = {absolute path to mswin directory; may need quotes}

Compile and install with nmake:

	nmake devinstall

Optionally, get rid of mswin/bin/geotiff.dll and mswin/lib/geotiff_i.lib


PNG
---
Open projects/{most recent visualc version}/libpng.sln in Visual Studio.

Select "LIB Release" mode.

Edit properties of the "libpng" project to set the correct path to the zlib project directory in "Additional Include Directories".

Build only the libpng project.  Either delete or disable other projects besides "libpng", or use a project-only option from the build menu.

Copy the library up to mswin/lib or lib64 and rename:

	projects/{visualc x}/Win32_LIB_Release/libpng.lib  --> png.lib

Copy the headers up to mswin/include:

	png.h
	pngconf.h


FFmpeg
------
Must be built using MinGW.  Building as shared libraries (DLLs) works better, because it eliminates the need to supply as many dependencies to VC++.  Guidance for building FFmpeg under MinGW may be found at http://ffmpeg.arrozcru.org.  There are prebuilt libraries available for download from that web site, but they appear to be configured for GPL.  If LGPL is necessary (generally the case), do the following...

Download the latest code from http://ffmpeg.org, and extract it into c:/msys/ffmpeg.

Start an MSYS session and type:

	export PATH="/c/Program Files/Microsoft Visual Studio 9.0/VC/bin":"/c/Program Files/Microsoft Visual Studio 9.0/Common7/IDE":$PATH   // to make lib.exe available
	cd /ffmpeg
	./configure --prefix=/ffmpeg/encap --disable-ffmpeg --disable-ffplay --disable-ffserver --enable-memalign-hack --enable-shared --disable-static
	make clean        // if you need to clean out a previous build
	rm -rf encap      // to clean out previous distribution
	make
	make install      // put new distribution in encap directory

Substitute your chosen version of Visual Studio in the PATH setting above.

Ignore error messages from configure about the missing "pr" command.  This comes from part of the script that writes out log messages, and its absence is not fatal.

Copy DLLs to mswin/bin:

	/ffmpeg/encap/avcodec-{major version}.dll
	/ffmpeg/encap/avdevice-{major version}.dll
	/ffmpeg/encap/avformat-{major version}.dll
	/ffmpeg/encap/avutil-{major version}.dll
	/ffmpeg/encap/swscale-{major version}.dll

where {major version} is the number before the first dot in a version string.  The major version is necessary, because this is what the import libraries are constructed to look for.  All other forms are simply copies of xxx-{major version}.dll.

Copy import libaries to mswin/lib or lib64:

	/ffmpeg/encap/avcodec.lib
	/ffmpeg/encap/avdevice.lib
	/ffmpeg/encap/avformat.lib
	/ffmpeg/encap/avutil.lib
	/ffmpeg/encap/swscale.lib

Copy /ffmpeg/encap/include to mswin/include.
