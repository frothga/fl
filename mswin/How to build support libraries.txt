Instructions for building Microsoft C versions of the support libraries.
========================================================================

This file explains how to build support libraries that can be linked into software built by Miscrosft toochains.  If you simply wish to use FL on a Windows system, the simplest way is to completely operate within the Cygwin environment.  However, if you goal is to use Miscrosoft tools, you must prepare libraries that are compatible.


Directory structure and naming conventions
------------------------------------------
The directory mswin generally resides directly under the root FL directory.  It contains subdirectories similar in structure to other posix software installations (bin, include, lib, lib64).  It also contains a "build" directory, which in turn contains source directories for the various supporting libraries.  When populating this structure from scratch, you should search for and download the most recent source code for each package.

Most files retain the name they normally receive from the build process in their respective projects.  However, libraries are renamed to be simple and follow MS naming conventions.  In particular, all libraries end in ".lib", and they generally do not have a leading or trailing "lib" in the name.  The following are desirable library names:

	jpeg.lib        // drop extraneous "lib" prefix
	z.lib           // cute way to get "zlib" while being terse
	tiff.lib        // drop extraneous "lib" prefix
	freetype.lib    // No version number. We have no interest in keeping multiple versions.


Build environment and tools
---------------------------
The preferred approach is to use the MS toolchain itself. Many of the packages come with CMake scripts, which conveniently generate Visual Studio projects. Best practice is to configure build and install directories separate from (or under) the source directory. Suggested names are "build" and "encap" respectively. The correct libraries and include files can then be copied out of the install tree to the mswin tree. Not all resources need to be copied.

Some packages require the MinGW cross-compiler. The optimal configuration is to use a Linux system (for example, one running inside of VirtualBox on Windows). Avoid MSYS. Also avoid using the original MinGW project. Instead, use both 32-bit and 64-bit resources from the MinGW-w64 fork: http://sourceforge.net/projects/mingw-w64

The rest of these instructions assume that "mingw32" and "mingw64" refer to the root directories where the respective tool-chains have been installed. When cross-compiling, it is important to add the mingw bin directory to the path:

	export PATH={mingw32 or mingw64}/bin:$PATH


Pthreads-w32
------------
The original source for pthreads-w32 may be found at http://sourceware.org/pthreads-win32. The most current pre-built binaries may be downloaded from that site.

The MinGW-w64 site also maintains a patch and binaries (http://sourceforge.net/projects/mingw-w64/files/External%20binary%20packages%20%28Win64%20hosted%29/pthreads). These are now older than the ones on the original site, but it is worth comparing to be sure. It is noted there that as of pthreads-w32 2.9.0, the patch may no longer be necessary.

Copy the library to mswin/lib or lib64 and rename:

	pthreadVC2.lib  --> pthread.lib

Copy the DLL to mswin/bin or bin64:

	pthreadVC2.dll

Keep the version suffix in pthreadXXX.dll, since the lib creates a dependency on a DLL with that specific suffix in its name.

Copy headers to mswin/include:

	pthread.h
	sched.h
	semaphore.h


LAPACK and BLAS
---------------
Prebuilt binaries are available from the LAPACK for Windows project:  http://icl.cs.utk.edu/lapack-for-windows/lapack/index.html

32-bit:

Copy to mswin/lib:

	libblas.lib     --> blas.lib
	liblapack.lib   --> lapack.lib

Copy to mswin/bin:

	libblas.dll      (never rename a dll)
	liblapack.dll

64-bit:

Copy to mswin/lib64:

	libblas.lib        --> blas.lib
	liblapack.lib      --> lapack.lib

Copy to mswin/bin64:

	libblas.dll
	liblapack.dll
	mingw64/x86_64-w64-mingw32/lib/libgfortran-3.dll
	mingw64/x86_64-w64-mingw32/lib/libquadmath-0.dll
	mingw64/x86_64-w64-mingw32/lib/libgcc_s_sjlj-1.dll

The reference implementation of BLAS is sufficient, but a more efficient one can be built using GotoBLAS from the University of Texas: http://www.tacc.utexas.edu/software_modules.php
GotoBLAS requires the MinGW cross-compiler to build.  Instructions are included in the downloaded package.


FFTW
----
Download prebuilt libraries from http://www.fftw.org/install/windows.html
Expand the zip file into mswin/build/fftw-{version}/{32 or 64}
Run the ming32 or ming64 version of dlltool on each of its DLLs to produce LIBs.

	{some nasty prefix}-dlltool -D {name}.dll -d {name}.def -l {name}.lib

Copy to mswin/lib or lib64:

	 libfftw{version}{float type}-{version}.lib --> fftw{version}{float type}.lib

Copy to mswin/bin or bin64:

	 libfftw{version}{float type}-{version}.dll


JPEG
----
Download from http://www.libjpeg-turbo.org/
This group seems to have taken up the mantle of JPEG development.

Use CMake gui to generate a Visual Studio project.
	select the appropriate compiler (32 or 64 bit)
 	Uncheck ENABLE_SHARED   (unecessary)
	Uncheck WITH_SIMD       (SIMD build is broken)
	Uncheck WITH_TURBOJPEG  (unecessary)
	Set CMAKE_INSTALL_PREFIX={build dir}/encap

In Visual Studio, select "Release" configuration and build. Ideally, you would build the INSTALL project to set up files in encap. Presently this is broken, such that it never gets to copying the header files.

Copy the library to mswin/lib or lib64, and rename:

	jpeg-static.lib --> jpeg.lib

Copy the headers to mswin/include:

	{source dir}/jpeglib.h
	{build dir}/jconfig.h
	{source dir}/jmorecfg.h
	{source dir}/jerror.h


zlib
----
Download from http://zlib.net/
Use CMake gui to generate Visual Studio project. Note: has non-standard CMake script which ignores CMAKE_INSTALL_PREFIX.
	select the appropriate compiler (32 or 64 bit)
	set INSTALL_BIN_DIR       = {build dir}/encap/bin
	set INSTALL_INC_DIR       = {build dir}/encap/include
	set INSTALL_LIB_DIR       = {build dir}/encap/lib
	set INSTALL_MAN_DIR       = {build dir}/encap/share/man
	set INSTALL_PKGCONFIG_DIR = {build dir}/encap/share/pkgconfig

In Visual Studio, select "Release" mode and build the INSTALL project.

Copy the library to mswin/lib or lib64 and rename:

	zlibstatic.lib --> z.lib

Copy the headers to mswin/include:

	zconf.h
	zlib.h


TIFF
----
Build JPEG and zlib first, so that TIFF can refer to them.
Download from http://www.remotesensing.org/libtiff

Use CMake gui to generate Visual Studio project.
	select the appropriate compiler (32 or 64 bit)
	uncheck BUILD_SHARED_LIBS
	set JPEG_INCLUDE_DIR = {mswin}/include
	set ZLIB_INCLUDE_DIR = {mswin}/include
	set JPEG_LIBRARY     = {mswin}/{lib or lib64}/jpeg.lib
	set ZLIB_LIBRARY     = {mswin}/{lib or lib64}/z.lib
	set CMAKE_INSTALL_PREFIX = {build dir}/encap

In Visual Studio, select "Release" mode and build the INSTALL project.

Copy the library to mswin/lib or lib64:

	encap/lib/tiff.lib

Copy header to mswin/include:

	encap/include/tiff.h
	encap/include/tiffconf.h
	encap/include/tiffio.h
	encap/include/tiffvers.h

Note: FL does not currently use the C++ I/O interface.


GeoTIFF
-------
Download from http://download.osgeo.org/geotiff/libgeotiff

Use CMake gui to generate Visual Studio project.
	select the appropriate compiler (32 or 64 bit)
	set TIFF_INCLUDE_DIR = {mswin}/include
	set TIFF_LIBRARY     = {mswin}/{lib or lib64}/tiff.lib
	set CMAKE_INSTALL_PREFIX = {build dir}/encap
	uncheck WITH_UTILITIES
	uncheck WITH_PROJ4

Delete {source dir}/geo_config.h, as it conflicts with the one generated by CMake.

In Visual Studio, select "Release" mode and build the INSTALL project.

Copy the library to mswin/lib or lib64:

	encap/lib/geotiff.lib

Copy encap/include/* to mswin/include.
Copy encap/share/* to mswin/share.


PNG
---
Download from http://www.libpng.org/pub/png

Follow directions in projects/vstudio/readme.txt for setting path to zlib. Default seems work with the mswin/build structure. Copy zconf.h from mswin/include back to mswin/build/{zlib dir} so png build can find it.

Open projects/vstudio/libpng.sln. Allow VS to upgrade the projects. Select "Release Library" mode. For 64-bit, open the configuration manager and add the x64 platform.

Build only the libpng project. Either delete or disable other projects besides "libpng", or use a project-only option from the build menu.

Copy the library up to mswin/lib or lib64 and rename:

	projects/vstudio/x64/Release Library/libpng{version}.lib --> lib64/png.lib
or	projects/vstudio/Release Library/libpng{version}.lib     --> lib/png.lib

Copy the headers up to mswin/include:

	png.h
	pngconf.h
	pnglibconf.h


FreeType
--------
Build PNG and zlib first, so FreeType can make use of them.
Download from http://www.freetype.org/download.html

Use CMake gui to generate Visual Studio project.
	select the appropriate compiler (32 or 64 bit)
	set CMAKE_INSTALL_PREFIX = {build dir}/encap
	set ZLIB_INCLUDE_DIR = {mswin}/include
	set ZLIB_LIBRARY     = {mswin}/{lib or lib64}/z.lib
	(Note: Had to rerun configure at this point, before PNG became visible as an option.)
	set PNG_INCLUDE_DIR = {mswin}/include
	set PNG_LIBRARY     = {mswin}/{lib or lib64}/png.lib

In Visual Studio, select "Release" mode and build the INSTALL project.

Copy the library to mswin/lib or lib64.

	freetype.lib

Copy encap/include/freetype2/* into mswin/include. This is effectively removing one level of directory complexity from the freetype include path.


FFmpeg
------
Must be built using MinGW.  Building as shared libraries (DLLs) works better, because it eliminates the need to supply as many dependencies to VC++.  FFMPEG forked in mid 2011.  The main ffmpeg project actively integrates any work from libav, so prefer the main ffmpeg source. Prebuilt libraries are available from http://ffmpeg.zeranoe.com. However, they often have GPL configurations. For LGPL, follow these instructions...

Download the latest code from http://ffmpeg.org, and expand into {mswin}/build/ffmpeg

32-bit:

	cd {mswin}/build/ffmpeg
	./configure --prefix={mswin}/build/ffmpeg/encap32 --enable-cross-compile --cross-prefix=i686-w64-mingw32- --arch=i686 --target-os=mingw32 --enable-shared --disable-static
	make clean           // if you need to clean out a previous build
	rm -rf encap{32,64}  // to clean out previous distribution
	make
	make install         // put new distribution in encap directory

For 64-bit builds, substitute the following configure line:

	./configure --prefix={mswin}/build/ffmpeg/encap64 --enable-cross-compile --cross-prefix=x86_64-w64-mingw32- --arch=x86_64 --target-os=mingw32 --enable-shared --disable-static

For a highly contagious and non-distributable version, but one that can do anything, add these flags: --enable-gpl --enable-version3 --enable-nonfree

Copy DLLs to mswin/bin or mswin/bin64:

	ffmpeg/encap{32,64}/bin/avcodec-{major version}.dll
	ffmpeg/encap{32,64}/bin/avdevice-{major version}.dll
	ffmpeg/encap{32,64}/bin/avfilter-{major version}.dll
	ffmpeg/encap{32,64}/bin/avformat-{major version}.dll
	ffmpeg/encap{32,64}/bin/avutil-{major version}.dll
	ffmpeg/encap{32,64}/bin/swscale-{major version}.dll

where {major version} is the number before the first dot in a version string.  The major version is necessary, because this is what the import libraries are constructed to look for.  All other forms are simply copies of xxx-{major version}.dll.

Copy import libaries to mswin/lib or lib64:

	ffmpeg/encap{32,64}/bin/avcodec.lib
	ffmpeg/encap{32,64}/bin/avdevice.lib
	ffmpeg/encap{32,64}/bin/avfilter.lib
	ffmpeg/encap{32,64}/bin/avformat.lib
	ffmpeg/encap{32,64}/bin/avutil.lib
	ffmpeg/encap{32,64}/bin/swscale.lib

Copy ffmpeg/encap{any}/include to mswin/include.
