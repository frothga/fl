Instructions for building Microsoft C versions of the support libraries.
========================================================================

This file explains how to build support libraries that can be linked into software built by Miscrosft toochains.  If you simply wish to use FL on a Windows system, the simplest way is to completely operate within the Cygwin environment.  However, if you goal is to use Miscrosoft tools, you must prepare libraries that are compatible.


Directory structure and naming conventions
------------------------------------------
The directory mswin generally resides directly under the root FL directory.  It contains subdirectories similar in structure to other posix software installations (bin, include, lib, lib64).  It also contains a "build" directory, which in turn contains source directories for the various supporting libraries.  When populating this structure from scratch, you should search for and download the most recent source code for each package.

Most files retain the name they normally receive from the build process in their respective projects.  However, libraries are renamed to be simple and follow MS naming conventions.  In particular, all libraries end in ".lib", and they generally do not have a leading or trailing "lib" in the name.  The following are desirable library names:

	jpeg.lib        // drop extraneous "lib"
	z.lib           // drop extraneous "lib"
	tiff.lib        // drop extraneous "lib"
	freetype.lib    // No version number


Build environment and tools
---------------------------
The preferred approach is to use the MS toolchain itself.  Some of these packages come with Visual Studio projects.  Other packages come with nmake scripts, and build best in a command window, often called a "Visual Studio Command Prompt".  When Visual Studio is installed, there sould be a Start menu item under the VS program group for launching such a command prompt.

To build 64bit versions, you will need the x64 cross-compiler supplied with Visual Studio Pro (or higher) editions.  Alternately, you can install the latest Windows SDK and select the 64bit toolchain.  You can then run nmake, or launch an express edition from the command line:

	vcexpress /useenv

Some of these packages can only be built using the MinGW cross-compiler.  The optimal configuration is to use a Linux system (for example, one running inside of VirtualBox on Windows).  Avoid MSYS.  Also avoid using the original MinGW project.  Instead, use both 32-bit and 64-bit resources from the MinGW-w64 fork:  http://sourceforge.net/projects/mingw-w64

The rest of these instructions assume that "mingw32" and "mingw64" refer to the root directories where the respective tool-chains have been installed.  When cross-compiling, it is important to add the mingw bin directory to the path:

	export PATH={mingw32 or mingw64}/bin:$PATH


FL supplied headers
-------------------
As of this writing, MS does not provide inttypes.h. Instead, there is a minimal substitutes already present in mswin/include. Remove these if MS ever achieves better standards compliance.


FreeType
--------
Solution file is builds/win32/{latest vc}/freetype.sln.  For 64-bit, open the configuration manager and add the x64 platform.  Build the "LIB Release Multithreaded" configuration.

Copy the library to mswin/lib or lib64 and rename:

	objs/win32/{latest vc}/freetype{version}.lib  --> freetype.lib

Copy the contents of the include directory into mswin/include.


Pthreads-w32
------------
The original source for pthreads-w32 may be found at http://sourceware.org/pthreads-win32.  However, the site does not seem to be actively maintained, and more current code is available than is posted on the site.  Instructions for either getting the pre-built binaries or building using the MinGW cross-compiler are available at: http://sourceforge.net/apps/trac/mingw-w64/wiki/Compile%20pthreads

You can download pthreads-20100604.zip (or more recent) and find both pre-built binaries and the source code.

To build with Visual Studio, patch the source per the directions.  In the resulting "pthreads" directory, open pthread.dsw and allow VS to convert it.  You may need to convert the line endings in pthread.dsp for VS to accept it.  For 64-bit, open configuration manager and add the x64 platform.  Select Release mode and compile.

Copy the library to mswin/lib or lib64 and rename:

	pthreadVC2.lib  --> pthread.lib

Copy the DLL to mswin/bin or bin64:

	pthreadVC2.dll

Keep the version suffix in pthreadXXX.dll, since the lib creates a dependency on a DLL with that specific suffix in its name.  You may want to customize the project to compile in a suffix that distinguishes 32 versus 64 bit.

Copy headers to mswin/include:

	pthread.h
	sched.h
	semaphore.h


LAPACK and BLAS
---------------
Prebuilt binaries are available from the LAPACK for Windows project:  http://icl.cs.utk.edu/lapack-for-windows/lapack/index.html
As of this writing, the links for 64-bit binaries are broken, so you need to go straight to the directories.

32-bit:

Copy to mswin/lib:

	libblas.lib     --> blas.lib
	liblapack.lib   --> lapack.lib

Copy to mswin/bin:

	libblas.dll      (never rename a dll)
	liblapack.dll

64-bit:  The download is buggy.  They will probably fix this at some point...

Copy to mswin/lib64:

	BLAS.lib        --> blas.lib
	LAPACK.lib      --> lapack.lib

Copy to mswin/bin64:

	BLAS.dll        --> libblas.dll  (they broke the golden rule given above)
	LAPACK.dll      --> liblapack.dll
	mingw64/x86_64-w64-mingw32/lib/libgfortran-3.dll
	mingw64/x86_64-w64-mingw32/lib/libquadmath-0.dll
	mingw64/x86_64-w64-mingw32/lib/libgcc_s_sjlj-1.dll

The reference implementation of BLAS is sufficient, but a more efficient one can be built using GotoBLAS from the University of Texas: http://www.tacc.utexas.edu/software_modules.php
GotoBLAS requires the MinGW cross-compiler to build.  Instructions are included in the downloaded package.


FFTW
----
Download prebuilt libraries from http://www.fftw.org/install/windows.html
Expand the zip file into mswin/build/fftw-{version}/{32 or 64}
Run the ming32 or ming64 version of dlltool on each of its DLLs to produce LIBs.

	{some nasty prefix}-dlltool -D {name}.dll -d {name}.def -l {name}.lib

Copy to mswin/lib or lib64:

	 libfftw{version}{float type}-{version}.lib --> fftw{version}{float type}.lib

Copy to mswin/bin or bin64:

	 libfftw{version}{float type}-{version}.dll


JPEG
----
Download from http://www.libjpeg-turbo.org/
This group seems to have taken up the mantel of JPEG development.

Use CMake gui to generate a Visual Studio project.  SIMD build is broken, so uncheck it.  Select "Release" configuration and build.

Copy the library to mswin/lib or lib64, and rename:

	release/turbojpeg-static.lib  --> jpeg.lib

Copy the headers to mswin/include:

	jpeglib.h
	jconfig.h
	jmorecfg.h
	jerror.h


Z
-
Download from http://zlib.net/
Use CMake gui to generate Visual Studio project.  Be sure to turn off BUILD_SHARED_LIBS.

Select "Release" mode.
For 64-bit build, set /MACHINE:X64 for the zlib project.  (For some reason, CMake doesn't seem to take care of this right.):
	Select "Properties" on the zlip project.
	Click "Librarian"
	Click the dropdown list for "Target Machine" and select correct type.
Compile.

Copy the library to mswin/lib or lib64 and rename:

	Release/zlib.lib  --> z.lib

Copy the headers to mswin/include:

	zconf.h
	zlib.h


TIFF
----
Build JPEG and Z first, so that TIFF can refer to them.

Modify nmake.opt by uncommenting the lines for JPEG and ZLIB support.  Point each one to mswin to get the built libraries.

	JPEGDIR = {absolute path to mswin; may need quote marks}
	JPEG_INCLUDE = -I$(JPEGDIR)/include
	JPEG_LIB = $(JPEGDIR)/{lib or lib64}/jpeg.lib

	ZLIBDIR = {absolute path to mswin; may need quote marks}
	ZLIB_INCLUDE = -I$(ZLIBDIR)/include
	ZLIB_LIB = $(ZLIBDIR)/{lib or lib64}/z.lib

Open a Visual Studio Command Prompt and type:

	cd {mswin}/build/{tiff project directory}
	nmake /f Makefile.vc clean    // if you want to clean out a previous build
	nmake /f Makefile.vc

Copy the library to mswin/lib or lib64 and rename:

	libtiff/libtiff.lib  --> tiff.lib

(Note that libtiff.lib is a static version, while libtiff_i.lib is an import library associated with libtiff.dll.  The instructions here assume a preference for static linking.)

Copy the headers to mswin/include:

	libtiff/tiff.h
	libtiff/tiffconf.h
	libtiff/tiffio.h
	libtiff/tiffvers.h


GeoTIFF
-------
Download from http://download.osgeo.org/geotiff/libgeotiff

Overwrite configuration with vc specific files:

	geo_config.h.vc --> geo_config.h
	makefile.vc     --> makefile

Edit makefile:

	TIFF_DIR = ..\{tiff project directory}\libtiff
	PREFIX = {absolute path to mswin directory; may need quotes}
	BINDIR = $(PREFIX)\{bin or bin64}
	LIBDIR = $(PREFIX)\{lib or lib64}

Compile and install with nmake:

	nmake clean
	nmake devinstall

Optionally, get rid of mswin/bin/geotiff.dll and mswin/lib/geotiff_i.lib


PNG
---
Download from http://www.libpng.org/pub/png

Follow directions in projects/vstudio/readme.txt for setting path to zlib.  Default seems work with the mswin/build structure.
Open projects/vstudio/libpng.sln.  Select "Release Library" mode.  For 64-bit, open the configuration manager and add the x64 platform.

Build only the libpng project.  Either delete or disable other projects besides "libpng", or use a project-only option from the build menu.

Copy the library up to mswin/lib or lib64 and rename:

	projects/vstudio/x64/Release Library/libpng{version}.lib  --> lib64/png.lib
or	projects/vstudio/Release Library/libpng{version}.lib      --> lib/png.lib

Copy the headers up to mswin/include:

	png.h
	pngconf.h
	pnglibconf.h


FFmpeg
------
Must be built using MinGW.  Building as shared libraries (DLLs) works better, because it eliminates the need to supply as many dependencies to VC++.  FFMPEG forked in mid 2011.  The main ffmpeg project actively integrates any work from libav, so prefer the main ffmpeg source. Prebuilt libraries are available from http://ffmpeg.zeranoe.com. However, they often have GPL configurations. For LGPL, follow these instructions...

Download the latest code from http://ffmpeg.org, and expand into {mswin}/build/ffmpeg

32-bit:

	cd {mswin}/build/ffmpeg
	./configure --prefix={mswin}/build/ffmpeg/encap32 --enable-cross-compile --cross-prefix=i686-w64-mingw32- --arch=i686 --target-os=mingw32 --enable-shared --disable-static
	make clean           // if you need to clean out a previous build
	rm -rf encap{32,64}  // to clean out previous distribution
	make
	make install         // put new distribution in encap directory

For 64-bit builds, substitute the following configure line:

	./configure --prefix={mswin}/build/ffmpeg/encap64 --enable-cross-compile --cross-prefix=x86_64-w64-mingw32- --arch=x86_64 --target-os=mingw32 --enable-shared --disable-static

For a highly contagious and non-distributable version, but one that can do anything, add these flags: --enable-gpl --enable-version3 --enable-nonfree

Copy DLLs to mswin/bin or mswin/bin64:

	ffmpeg/encap{32,64}/bin/avcodec-{major version}.dll
	ffmpeg/encap{32,64}/bin/avdevice-{major version}.dll
	ffmpeg/encap{32,64}/bin/avfilter-{major version}.dll
	ffmpeg/encap{32,64}/bin/avformat-{major version}.dll
	ffmpeg/encap{32,64}/bin/avutil-{major version}.dll
	ffmpeg/encap{32,64}/bin/swscale-{major version}.dll

where {major version} is the number before the first dot in a version string.  The major version is necessary, because this is what the import libraries are constructed to look for.  All other forms are simply copies of xxx-{major version}.dll.

Copy import libaries to mswin/lib or lib64:

	ffmpeg/encap{32,64}/bin/avcodec.lib
	ffmpeg/encap{32,64}/bin/avdevice.lib
	ffmpeg/encap{32,64}/bin/avfilter.lib
	ffmpeg/encap{32,64}/bin/avformat.lib
	ffmpeg/encap{32,64}/bin/avutil.lib
	ffmpeg/encap{32,64}/bin/swscale.lib

Copy ffmpeg/encap{any}/include to mswin/include.
